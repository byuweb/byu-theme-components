{"version":3,"sources":["src/html-imports.js"],"names":["scope","newCustomEvent","type","params","window","CustomEvent","event","document","createEvent","initCustomEvent","bubbles","cancelable","detail","importForElement","element","useNative","ownerDocument","doc","parentNode","closest","importSelector","isImportLink","whenImportsReady","callback","imports","querySelectorAll","rootImportSelector","pending","length","i","l","imp","whenElementLoaded","whenDocumentReady","stateChanged","readyState","body","removeEventListener","addEventListener","whenReady","localName","src","onLoadingDone","isIE","node","nodeType","Node","ELEMENT_NODE","rel","constructor","Importer","documents","inflight","dynamicImportsMO","MutationObserver","m","handleMutations","observe","head","childList","subtree","loadImports","createElement","currentScript","Object","defineProperty","get","scripts","configurable","ABS_URL_TEST","CSS_URL_REGEXP","CSS_IMPORT_REGEXP","STYLESHEET_REGEXP","Path","fixUrls","base","href","setAttribute","replaceAttrUrl","getAttribute","r","replaceUrls","textContent","text","linkUrl","regexp","replace","pre","url","post","urlPath","resolveUrl","test","undefined","__workingURL","u","URL","pathname","e","__tempDoc","implementation","createHTMLDocument","__base","appendChild","__anchor","Xhr","async","load","success","fail","match","pieces","split","resource","header","indexOf","atob","decodeURIComponent","request","XMLHttpRequest","open","onload","request.onload","redirectedUrl","getResponseHeader","location","origin","protocol","host","response","responseText","status","send","navigator","userAgent","links","loadImport","link","import","fireEventIfNeeded","makeDocument","processImportsIfLoadingDone","createDocumentFragment","p1","p2","template","innerHTML","content","firstChild","baseEl","querySelector","removeAttribute","n$","importDependenciesSelector","inlineScriptIndex","n","importDependencyAttr","encodeURIComponent","num","disconnect","flatten","scriptsOk","stylesOk","fireEvents","waitForStyles","runScripts","DOCUMENT_FRAGMENT_NODE","cloneScript","s","s$","clone","j","ll","attributes","name","value","replaceChild","pendingScriptsSelector","pendingStylesSelector","needsMove","disabledLinkSelector","placeholder","insertBefore","nextSibling","newSibling","dispatchEvent","eventType","mutations","addedNodes","ii","elem","imps","target","native_baseURI","getOwnPropertyDescriptor","prototype","klass","Element","ownerDoc","call","enumerable","HTMLImports"],"mappings":"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","file":"html-imports.min.js","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n(scope => {\r\n\r\n  /********************* base setup *********************/\r\n  const useNative = Boolean('import' in document.createElement('link'));\r\n\r\n  // Polyfill `currentScript` for browsers without it.\r\n  let currentScript = null;\r\n  if ('currentScript' in document === false) {\r\n    Object.defineProperty(document, 'currentScript', {\r\n      get() {\r\n        return currentScript ||\r\n          // NOTE: only works when called in synchronously executing code.\r\n          // readyState should check if `loading` but IE10 is\r\n          // interactive when scripts run so we cheat. This is not needed by\r\n          // html-imports polyfill but helps generally polyfill `currentScript`.\r\n          (document.readyState !== 'complete' ?\r\n            document.scripts[document.scripts.length - 1] : null);\r\n      },\r\n      configurable: true\r\n    });\r\n  }\r\n\r\n  /********************* path fixup *********************/\r\n  const ABS_URL_TEST = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\r\n  const CSS_URL_REGEXP = /(url\\()([^)]*)(\\))/g;\r\n  const CSS_IMPORT_REGEXP = /(@import[\\s]+(?!url\\())([^;]*)(;)/g;\r\n  const STYLESHEET_REGEXP = /(<link[^>]*)(rel=['|\"]?stylesheet['|\"]?[^>]*>)/g;\r\n\r\n  // path fixup: style elements in imports must be made relative to the main\r\n  // document. We fixup url's in url() and @import.\r\n  const Path = {\r\n\r\n    fixUrls(element, base) {\r\n      if (element.href) {\r\n        element.setAttribute('href',\r\n          Path.replaceAttrUrl(element.getAttribute('href'), base));\r\n      }\r\n      if (element.src) {\r\n        element.setAttribute('src',\r\n          Path.replaceAttrUrl(element.getAttribute('src'), base));\r\n      }\r\n      if (element.localName === 'style') {\r\n        const r = Path.replaceUrls(element.textContent, base, CSS_URL_REGEXP);\r\n        element.textContent = Path.replaceUrls(r, base, CSS_IMPORT_REGEXP);\r\n      }\r\n    },\r\n\r\n    replaceUrls(text, linkUrl, regexp) {\r\n      return text.replace(regexp, (m, pre, url, post) => {\r\n        let urlPath = url.replace(/[\"']/g, '');\r\n        if (linkUrl) {\r\n          urlPath = Path.resolveUrl(urlPath, linkUrl);\r\n        }\r\n        return pre + '\\'' + urlPath + '\\'' + post;\r\n      });\r\n    },\r\n\r\n    replaceAttrUrl(text, linkUrl) {\r\n      if (text && ABS_URL_TEST.test(text)) {\r\n        return text;\r\n      } else {\r\n        return Path.resolveUrl(text, linkUrl);\r\n      }\r\n    },\r\n\r\n    resolveUrl(url, base) {\r\n      // Lazy feature detection.\r\n      if (Path.__workingURL === undefined) {\r\n        Path.__workingURL = false;\r\n        try {\r\n          const u = new URL('b', 'http://a');\r\n          u.pathname = 'c%20d';\r\n          Path.__workingURL = (u.href === 'http://a/c%20d');\r\n        } catch (e) {}\r\n      }\r\n\r\n      if (Path.__workingURL) {\r\n        return (new URL(url, base)).href;\r\n      }\r\n\r\n      // Fallback to creating an anchor into a disconnected document.\r\n      let doc = Path.__tempDoc;\r\n      if (!doc) {\r\n        doc = document.implementation.createHTMLDocument('temp');\r\n        Path.__tempDoc = doc;\r\n        doc.__base = doc.createElement('base');\r\n        doc.head.appendChild(doc.__base);\r\n        doc.__anchor = doc.createElement('a');\r\n      }\r\n      doc.__base.href = base;\r\n      doc.__anchor.href = url;\r\n      return doc.__anchor.href || url;\r\n    }\r\n  };\r\n\r\n  /********************* Xhr processor *********************/\r\n  const Xhr = {\r\n\r\n    async: true,\r\n\r\n    /**\r\n     * @param {!string} url\r\n     * @param {!function(!string, string=)} success\r\n     * @param {!function(!string)} fail\r\n     */\r\n    load(url, success, fail) {\r\n      if (!url) {\r\n        fail('error: href must be specified');\r\n      } else if (url.match(/^data:/)) {\r\n        // Handle Data URI Scheme\r\n        const pieces = url.split(',');\r\n        const header = pieces[0];\r\n        let resource = pieces[1];\r\n        if (header.indexOf(';base64') > -1) {\r\n          resource = atob(resource);\r\n        } else {\r\n          resource = decodeURIComponent(resource);\r\n        }\r\n        success(resource);\r\n      } else {\r\n        const request = new XMLHttpRequest();\r\n        request.open('GET', url, Xhr.async);\r\n        request.onload = () => {\r\n          // Servers redirecting an import can add a Location header to help us\r\n          // polyfill correctly. Handle relative and full paths.\r\n          let redirectedUrl = request.getResponseHeader('Location');\r\n          if (redirectedUrl && redirectedUrl.indexOf('/') === 0) {\r\n            // In IE location.origin might not work\r\n            // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7\r\n            const origin = (location.origin || location.protocol + '//' + location.host);\r\n            redirectedUrl = origin + redirectedUrl;\r\n          }\r\n          const resource = /** @type {string} */ (request.response || request.responseText);\r\n          if (request.status === 304 || request.status === 0 ||\r\n            request.status >= 200 && request.status < 300) {\r\n            success(resource, redirectedUrl);\r\n          } else {\r\n            fail(resource);\r\n          }\r\n        };\r\n        request.send();\r\n      }\r\n    }\r\n  };\r\n\r\n  /********************* importer *********************/\r\n\r\n  const isIE = /Trident/.test(navigator.userAgent) ||\r\n    /Edge\\/\\d./i.test(navigator.userAgent);\r\n\r\n  const importSelector = 'link[rel=import]';\r\n\r\n  // Used to disable loading of resources.\r\n  const importDisableType = 'import-disable';\r\n\r\n  const disabledLinkSelector = `link[rel=stylesheet][href][type=${importDisableType}]`;\r\n\r\n  const importDependenciesSelector = `${importSelector}, ${disabledLinkSelector},\r\n    style:not([type]), link[rel=stylesheet][href]:not([type]),\r\n    script:not([type]), script[type=\"application/javascript\"],\r\n    script[type=\"text/javascript\"]`;\r\n\r\n  const importDependencyAttr = 'import-dependency';\r\n\r\n  const rootImportSelector = `${importSelector}:not(${importDependencyAttr})`;\r\n\r\n  const pendingScriptsSelector = `script[${importDependencyAttr}]`;\r\n\r\n  const pendingStylesSelector = `style[${importDependencyAttr}],\r\n    link[rel=stylesheet][${importDependencyAttr}]`;\r\n\r\n  /**\r\n   * Importer will:\r\n   * - load any linked import documents (with deduping)\r\n   * - whenever an import is loaded, prompt the parser to try to parse\r\n   * - observe imported documents for new elements (these are handled via the\r\n   *   dynamic importer)\r\n   */\r\n  class Importer {\r\n    constructor() {\r\n      this.documents = {};\r\n      // Used to keep track of pending loads, so that flattening and firing of\r\n      // events can be done when all resources are ready.\r\n      this.inflight = 0;\r\n      this.dynamicImportsMO = new MutationObserver(m => this.handleMutations(m));\r\n      // Observe changes on <head>.\r\n      this.dynamicImportsMO.observe(document.head, {\r\n        childList: true,\r\n        subtree: true\r\n      });\r\n      // 1. Load imports contents\r\n      // 2. Assign them to first import links on the document\r\n      // 3. Wait for import styles & scripts to be done loading/running\r\n      // 4. Fire load/error events\r\n      this.loadImports(document);\r\n    }\r\n\r\n    /**\r\n     * @param {!(HTMLDocument|DocumentFragment|Element)} doc\r\n     */\r\n    loadImports(doc) {\r\n      const links = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (doc.querySelectorAll(importSelector));\r\n      for (let i = 0, l = links.length; i < l; i++) {\r\n        this.loadImport(links[i]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLLinkElement} link\r\n     */\r\n    loadImport(link) {\r\n      const url = link.href;\r\n      // This resource is already being handled by another import.\r\n      if (this.documents[url] !== undefined) {\r\n        // If import is already loaded, we can safely associate it to the link\r\n        // and fire the load/error event.\r\n        const imp = this.documents[url];\r\n        if (imp && imp['__loaded']) {\r\n          link.import = imp;\r\n          this.fireEventIfNeeded(link);\r\n        }\r\n        return;\r\n      }\r\n      this.inflight++;\r\n      // Mark it as pending to notify others this url is being loaded.\r\n      this.documents[url] = 'pending';\r\n      Xhr.load(url, (resource, redirectedUrl) => {\r\n        const doc = this.makeDocument(resource, redirectedUrl || url);\r\n        this.documents[url] = doc;\r\n        this.inflight--;\r\n        // Load subtree.\r\n        this.loadImports(doc);\r\n        this.processImportsIfLoadingDone();\r\n      }, () => {\r\n        // If load fails, handle error.\r\n        this.documents[url] = null;\r\n        this.inflight--;\r\n        this.processImportsIfLoadingDone();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a new document containing resource and normalizes urls accordingly.\r\n     * @param {string=} resource\r\n     * @param {string=} url\r\n     * @return {!DocumentFragment}\r\n     */\r\n    makeDocument(resource, url) {\r\n      if (!resource) {\r\n        return document.createDocumentFragment();\r\n      }\r\n\r\n      if (isIE) {\r\n        // <link rel=stylesheet> should be appended to <head>. Not doing so\r\n        // in IE/Edge breaks the cascading order. We disable the loading by\r\n        // setting the type before setting innerHTML to avoid loading\r\n        // resources twice.\r\n        resource = resource.replace(STYLESHEET_REGEXP, (match, p1, p2) => {\r\n          if (match.indexOf('type=') === -1) {\r\n            return `${p1} type=${importDisableType} ${p2}`;\r\n          }\r\n          return match;\r\n        });\r\n      }\r\n\r\n      let content;\r\n      const template = /** @type {!HTMLTemplateElement} */\r\n        (document.createElement('template'));\r\n      template.innerHTML = resource;\r\n      if (template.content) {\r\n        // This creates issues in Safari10 when used with shadydom (see #12).\r\n        content = template.content;\r\n      } else {\r\n        // <template> not supported, create fragment and move content into it.\r\n        content = document.createDocumentFragment();\r\n        while (template.firstChild) {\r\n          content.appendChild(template.firstChild);\r\n        }\r\n      }\r\n\r\n      // Support <base> in imported docs. Resolve url and remove its href.\r\n      const baseEl = content.querySelector('base');\r\n      if (baseEl) {\r\n        url = Path.replaceAttrUrl(baseEl.getAttribute('href'), url);\r\n        baseEl.removeAttribute('href');\r\n      }\r\n\r\n      const n$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)>} */\r\n        (content.querySelectorAll(importDependenciesSelector));\r\n      // For source map hints.\r\n      let inlineScriptIndex = 0;\r\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\r\n        // Listen for load/error events, then fix urls.\r\n        whenElementLoaded(n);\r\n        Path.fixUrls(n, url);\r\n        // Mark for easier selectors.\r\n        n.setAttribute(importDependencyAttr, '');\r\n        // Generate source map hints for inline scripts.\r\n        if (n.localName === 'script' && !n.src && n.textContent) {\r\n          const num = inlineScriptIndex ? `-${inlineScriptIndex}` : '';\r\n          const content = n.textContent + `\\n//# sourceURL=${url}${num}.js\\n`;\r\n          // We use the src attribute so it triggers load/error events, and it's\r\n          // easier to capture errors (e.g. parsing) like this.\r\n          n.setAttribute('src', 'data:text/javascript;charset=utf-8,' + encodeURIComponent(content));\r\n          n.textContent = '';\r\n          inlineScriptIndex++;\r\n        }\r\n      }\r\n      return content;\r\n    }\r\n\r\n    /**\r\n     * Waits for loaded imports to finish loading scripts and styles, then fires\r\n     * the load/error events.\r\n     */\r\n    processImportsIfLoadingDone() {\r\n      // Wait until all resources are ready, then load import resources.\r\n      if (this.inflight) return;\r\n\r\n      // Stop observing, flatten & load resource, then restart observing <head>.\r\n      this.dynamicImportsMO.disconnect();\r\n      this.flatten(document);\r\n      // We wait for styles to load, and at the same time we execute the scripts,\r\n      // then fire the load/error events for imports to have faster whenReady\r\n      // callback execution.\r\n      // NOTE: This is different for native behavior where scripts would be\r\n      // executed after the styles before them are loaded.\r\n      // To achieve that, we could select pending styles and scripts in the\r\n      // document and execute them sequentially in their dom order.\r\n      let scriptsOk = false,\r\n        stylesOk = false;\r\n      const onLoadingDone = () => {\r\n        if (stylesOk && scriptsOk) {\r\n          // Catch any imports that might have been added while we\r\n          // weren't looking, wait for them as well.\r\n          this.loadImports(document);\r\n          if (this.inflight) return;\r\n\r\n          // Restart observing.\r\n          this.dynamicImportsMO.observe(document.head, {\r\n            childList: true,\r\n            subtree: true\r\n          });\r\n          this.fireEvents();\r\n        }\r\n      }\r\n      this.waitForStyles(() => {\r\n        stylesOk = true;\r\n        onLoadingDone();\r\n      });\r\n      this.runScripts(() => {\r\n        scriptsOk = true;\r\n        onLoadingDone();\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @param {!HTMLDocument} doc\r\n     */\r\n    flatten(doc) {\r\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (doc.querySelectorAll(importSelector));\r\n      for (let i = 0, l = n$.length, n; i < l && (n = n$[i]); i++) {\r\n        const imp = this.documents[n.href];\r\n        n.import = /** @type {!Document} */ (imp);\r\n        if (imp && imp.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\r\n          // We set the .import to be the link itself, and update its readyState.\r\n          // Other links with the same href will point to this link.\r\n          this.documents[n.href] = n;\r\n          n.readyState = 'loading';\r\n          // Suppress Closure warning about incompatible subtype assignment.\r\n          ( /** @type {!HTMLElement} */ (n).import = n);\r\n          this.flatten(imp);\r\n          n.appendChild(imp);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Replaces all the imported scripts with a clone in order to execute them.\r\n     * Updates the `currentScript`.\r\n     * @param {!function()} callback\r\n     */\r\n    runScripts(callback) {\r\n      const s$ = document.querySelectorAll(pendingScriptsSelector);\r\n      const l = s$.length;\r\n      const cloneScript = i => {\r\n        if (i < l) {\r\n          // The pending scripts have been generated through innerHTML and\r\n          // browsers won't execute them for security reasons. We cannot use\r\n          // s.cloneNode(true) either, the only way to run the script is manually\r\n          // creating a new element and copying its attributes.\r\n          const s = s$[i];\r\n          const clone = /** @type {!HTMLScriptElement} */\r\n            (document.createElement('script'));\r\n          // Remove import-dependency attribute to avoid double cloning.\r\n          s.removeAttribute(importDependencyAttr);\r\n          for (let j = 0, ll = s.attributes.length; j < ll; j++) {\r\n            clone.setAttribute(s.attributes[j].name, s.attributes[j].value);\r\n          }\r\n          // Update currentScript and replace original with clone script.\r\n          currentScript = clone;\r\n          s.parentNode.replaceChild(clone, s);\r\n          whenElementLoaded(clone, () => {\r\n            currentScript = null;\r\n            cloneScript(i + 1);\r\n          });\r\n        } else {\r\n          callback();\r\n        }\r\n      };\r\n      cloneScript(0);\r\n    }\r\n\r\n    /**\r\n     * Waits for all the imported stylesheets/styles to be loaded.\r\n     * @param {!function()} callback\r\n     */\r\n    waitForStyles(callback) {\r\n      const s$ = /** @type {!NodeList<!(HTMLLinkElement|HTMLStyleElement)>} */\r\n        (document.querySelectorAll(pendingStylesSelector));\r\n      let pending = s$.length;\r\n      if (!pending) {\r\n        callback();\r\n        return;\r\n      }\r\n      // <link rel=stylesheet> should be appended to <head>. Not doing so\r\n      // in IE/Edge breaks the cascading order\r\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10472273/\r\n      // If there is one <link rel=stylesheet> imported, we must move all imported\r\n      // links and styles to <head>.\r\n      const needsMove = isIE && !!document.querySelector(disabledLinkSelector);\r\n      for (let i = 0, l = s$.length, s; i < l && (s = s$[i]); i++) {\r\n        // Listen for load/error events, remove selector once is done loading.\r\n        whenElementLoaded(s, () => {\r\n          s.removeAttribute(importDependencyAttr);\r\n          if (--pending === 0) {\r\n            callback();\r\n          }\r\n        });\r\n        // Check if was already moved to head, to handle the case where the element\r\n        // has already been moved but it is still loading.\r\n        if (needsMove && s.parentNode !== document.head) {\r\n          // Replace the element we're about to move with a placeholder.\r\n          const placeholder = document.createElement(s.localName);\r\n          // Add reference of the moved element.\r\n          placeholder['__appliedElement'] = s;\r\n          // Disable this from appearing in document.styleSheets.\r\n          placeholder.setAttribute('type', 'import-placeholder');\r\n          // Append placeholder next to the sibling, and move original to <head>.\r\n          s.parentNode.insertBefore(placeholder, s.nextSibling);\r\n          let newSibling = importForElement(s);\r\n          while (newSibling && importForElement(newSibling)) {\r\n            newSibling = importForElement(newSibling);\r\n          }\r\n          if (newSibling.parentNode !== document.head) {\r\n            newSibling = null;\r\n          }\r\n          document.head.insertBefore(s, newSibling);\r\n          // Enable the loading of <link rel=stylesheet>.\r\n          s.removeAttribute('type');\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fires load/error events for imports in the right order .\r\n     */\r\n    fireEvents() {\r\n      const n$ = /** @type {!NodeList<!HTMLLinkElement>} */\r\n        (document.querySelectorAll(importSelector));\r\n      // Inverse order to have events firing bottom-up.\r\n      for (let i = n$.length - 1, n; i >= 0 && (n = n$[i]); i--) {\r\n        this.fireEventIfNeeded(n);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Fires load/error event for the import if this wasn't done already.\r\n     * @param {!HTMLLinkElement} link\r\n     */\r\n    fireEventIfNeeded(link) {\r\n      // Don't fire twice same event.\r\n      if (!link['__loaded']) {\r\n        link['__loaded'] = true;\r\n        // Update link's import readyState.\r\n        link.import && (link.import.readyState = 'complete');\r\n        const eventType = link.import ? 'load' : 'error';\r\n        link.dispatchEvent(newCustomEvent(eventType, {\r\n          bubbles: false,\r\n          cancelable: false,\r\n          detail: undefined\r\n        }));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @param {Array<MutationRecord>} mutations\r\n     */\r\n    handleMutations(mutations) {\r\n      for (let i = 0; i < mutations.length; i++) {\r\n        const m = mutations[i];\r\n        if (!m.addedNodes) {\r\n          continue;\r\n        }\r\n        for (let ii = 0; ii < m.addedNodes.length; ii++) {\r\n          const elem = m.addedNodes[ii];\r\n          if (!elem || elem.nodeType !== Node.ELEMENT_NODE) {\r\n            continue;\r\n          }\r\n          // NOTE: added scripts are not updating currentScript in IE.\r\n          if (isImportLink(elem)) {\r\n            this.loadImport( /** @type {!HTMLLinkElement} */ (elem));\r\n          } else {\r\n            this.loadImports( /** @type {!Element} */ (elem));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Node} node\r\n   * @return {boolean}\r\n   */\r\n  const isImportLink = node => {\r\n    return node.nodeType === Node.ELEMENT_NODE && node.localName === 'link' &&\r\n      ( /** @type {!HTMLLinkElement} */ (node).rel === 'import');\r\n  };\r\n\r\n  /**\r\n   * Waits for an element to finish loading. If already done loading, it will\r\n   * mark the element accordingly.\r\n   * @param {!(HTMLLinkElement|HTMLScriptElement|HTMLStyleElement)} element\r\n   * @param {function()=} callback\r\n   */\r\n  const whenElementLoaded = (element, callback) => {\r\n    if (element['__loaded']) {\r\n      callback && callback();\r\n    } else if (element.localName === 'script' && !element.src) {\r\n      // Inline scripts don't trigger load/error events, consider them already loaded.\r\n      element['__loaded'] = true;\r\n      callback && callback();\r\n    } else {\r\n      const onLoadingDone = event => {\r\n        element.removeEventListener(event.type, onLoadingDone);\r\n        element['__loaded'] = true;\r\n        callback && callback();\r\n      };\r\n      element.addEventListener('load', onLoadingDone);\r\n      // NOTE: We listen only for load events in IE/Edge, because in IE/Edge\r\n      // <style> with @import will fire error events for each failing @import,\r\n      // and finally will trigger the load event when all @import are\r\n      // finished (even if all fail).\r\n      if (!isIE || element.localName !== 'style') {\r\n        element.addEventListener('error', onLoadingDone);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the callback when all imports in the document at call time\r\n   * (or at least document ready) have loaded. Callback is called synchronously\r\n   * if imports are already done loading.\r\n   * @param {function()=} callback\r\n   */\r\n  const whenReady = callback => {\r\n    // 1. ensure the document is in a ready state (has dom), then\r\n    // 2. watch for loading of imports and call callback when done\r\n    whenDocumentReady(() => whenImportsReady(() => callback && callback()));\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback when document is in ready state. Callback is called\r\n   *  synchronously if document is already done loading.\r\n   * @param {!function()} callback\r\n   */\r\n  const whenDocumentReady = callback => {\r\n    const stateChanged = () => {\r\n      // NOTE: Firefox can hit readystate interactive without document.body existing.\r\n      // This is anti-spec, but we handle it here anyways by waiting for next change.\r\n      if (document.readyState !== 'loading' && !!document.body) {\r\n        document.removeEventListener('readystatechange', stateChanged);\r\n        callback();\r\n      }\r\n    }\r\n    document.addEventListener('readystatechange', stateChanged);\r\n    stateChanged();\r\n  }\r\n\r\n  /**\r\n   * Invokes the callback after all imports are loaded. Callback is called\r\n   * synchronously if imports are already done loading.\r\n   * @param {!function()} callback\r\n   */\r\n  const whenImportsReady = callback => {\r\n    let imports = /** @type {!NodeList<!HTMLLinkElement>} */\r\n      (document.querySelectorAll(rootImportSelector));\r\n    let pending = imports.length;\r\n    if (!pending) {\r\n      callback();\r\n      return;\r\n    }\r\n    for (let i = 0, l = imports.length, imp; i < l && (imp = imports[i]); i++) {\r\n      whenElementLoaded(imp, () => {\r\n        if (--pending === 0) {\r\n          callback();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the import document containing the element.\r\n   * @param {!Node} element\r\n   * @return {HTMLLinkElement|Document|undefined}\r\n   */\r\n  const importForElement = element => {\r\n    if (useNative) {\r\n      // Return only if not in the main doc!\r\n      return element.ownerDocument !== document ? element.ownerDocument : null;\r\n    }\r\n    let doc = element['__importDoc'];\r\n    if (!doc && element.parentNode) {\r\n      doc = /** @type {!Element} */ (element.parentNode);\r\n      if (typeof doc.closest === 'function') {\r\n        // Element.closest returns the element itself if it matches the selector,\r\n        // so we search the closest import starting from the parent.\r\n        doc = doc.closest(importSelector);\r\n      } else {\r\n        // Walk up the parent tree until we find an import.\r\n        while (!isImportLink(doc) && (doc = doc.parentNode)) {}\r\n      }\r\n      element['__importDoc'] = doc;\r\n    }\r\n    return doc;\r\n  }\r\n\r\n  const newCustomEvent = (type, params) => {\r\n    if (typeof window.CustomEvent === 'function') {\r\n      return new CustomEvent(type, params);\r\n    }\r\n    const event = /** @type {!CustomEvent} */ (document.createEvent('CustomEvent'));\r\n    event.initCustomEvent(type, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);\r\n    return event;\r\n  };\r\n\r\n  if (useNative) {\r\n    // Check for imports that might already be done loading by the time this\r\n    // script is actually executed. Native imports are blocking, so the ones\r\n    // available in the document by this time should already have failed\r\n    // or have .import defined.\r\n    const imps = /** @type {!NodeList<!HTMLLinkElement>} */\r\n      (document.querySelectorAll(importSelector));\r\n    for (let i = 0, l = imps.length, imp; i < l && (imp = imps[i]); i++) {\r\n      if (!imp.import || imp.import.readyState !== 'loading') {\r\n        imp['__loaded'] = true;\r\n      }\r\n    }\r\n    // Listen for load/error events to capture dynamically added scripts.\r\n    /**\r\n     * @type {!function(!Event)}\r\n     */\r\n    const onLoadingDone = event => {\r\n      const elem = /** @type {!Element} */ (event.target);\r\n      if (isImportLink(elem)) {\r\n        elem['__loaded'] = true;\r\n      }\r\n    };\r\n    document.addEventListener('load', onLoadingDone, true /* useCapture */ );\r\n    document.addEventListener('error', onLoadingDone, true /* useCapture */ );\r\n  } else {\r\n    // Override baseURI so that imported elements' baseURI can be used seemlessly\r\n    // on native or polyfilled html-imports.\r\n    // NOTE: a <link rel=import> will have `link.baseURI === link.href`, as the link\r\n    // itself is used as the `import` document.\r\n    /** @type {Object|undefined} */\r\n    const native_baseURI = Object.getOwnPropertyDescriptor(Node.prototype, 'baseURI');\r\n    // NOTE: if not configurable (e.g. safari9), set it on the Element prototype. \r\n    const klass = !native_baseURI || native_baseURI.configurable ? Node : Element;\r\n    Object.defineProperty(klass.prototype, 'baseURI', {\r\n      get() {\r\n        const ownerDoc = /** @type {HTMLLinkElement} */ (isImportLink(this) ? this : importForElement(this));\r\n        if (ownerDoc) return ownerDoc.href;\r\n        // Use native baseURI if possible.\r\n        if (native_baseURI && native_baseURI.get) return native_baseURI.get.call(this);\r\n        // Polyfill it if not available.\r\n        const base = /** @type {HTMLBaseElement} */ (document.querySelector('base'));\r\n        return (base || window.location).href;\r\n      },\r\n      configurable: true,\r\n      enumerable: true\r\n    });\r\n\r\n    whenDocumentReady(() => new Importer());\r\n  }\r\n\r\n  /**\r\n    Add support for the `HTMLImportsLoaded` event and the `HTMLImports.whenReady`\r\n    method. This api is necessary because unlike the native implementation,\r\n    script elements do not force imports to resolve. Instead, users should wrap\r\n    code in either an `HTMLImportsLoaded` handler or after load time in an\r\n    `HTMLImports.whenReady(callback)` call.\r\n\r\n    NOTE: This module also supports these apis under the native implementation.\r\n    Therefore, if this file is loaded, the same code can be used under both\r\n    the polyfill and native implementation.\r\n   */\r\n  whenReady(() => document.dispatchEvent(newCustomEvent('HTMLImportsLoaded', {\r\n    cancelable: true,\r\n    bubbles: true,\r\n    detail: undefined\r\n  })));\r\n\r\n  // exports\r\n  scope.useNative = useNative;\r\n  scope.whenReady = whenReady;\r\n  scope.importForElement = importForElement;\r\n\r\n})(window.HTMLImports = (window.HTMLImports || {}));"]}