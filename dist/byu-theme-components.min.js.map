{"version":3,"file":"byu-theme-components.min.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/decorators.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../components/byu-footer/byu-footer.js","../components/byu-header/byu-header.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected.` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    // If there are no styles, skip unnecessary work\n    if (styles.length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < styles.length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    if (window.ShadyCSS.nativeShadow) {\n        // When in native Shadow DOM, re-add styling to rendered content using\n        // the style ShadyCSS produced.\n        const style = template.element.content.querySelector('style');\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When not in native Shadow DOM, at this point ShadyCSS will have\n        // removed the style from the lit template and parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = container instanceof ShadowRoot &&\n        compatibleShadyCSSVersion && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            // tslint:disable-next-line:no-any decorator\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { LitElement, html, customElement, property } from 'lit-element';\nimport style from './byu-footer.scss';\n\n@customElement('byu-footer')\nexport class BYUFooter extends LitElement {\n\n  @property()\n  foo = 'footer property';\n\n  static styles = style;\n\n  render(){\n    return html`\n        <p>${this.foo}</p>\n    `;\n  }\n}","import { customElement, html, LitElement, property } from 'lit-element';\nimport style from './byu-header.scss';\n\n@customElement('byu-header')\nexport class BYUHeader extends LitElement {\n\n  @property()\n  foo = 'header property';\n\n  static styles = style;\n\n  render () {\n    return html`\n        <header role=\"banner\" class=\"byu-header\">\n    <div class=\"byu-site-banner\">\n\n        <a class=\"byu-link\" href=\"https://byu.edu\">\n            <span class=\"visually-hidden\">BYU</span>\n        </a>\n\n        <div class=\"byu-titles\">\n\n            <h1 class=\"byu-site-title\">\n                <a href=\"/\">Mission &amp; Aims</a>\n            </h1>\n\n            <button class=\"byu-menu-button\" aria-expanded=\"false\">Menu</button>\n\n        </div>\n\n        <div class=\"byu-action-id-search\">\n\n        </div>\n    </div>\n\n</header>\n\n    `;\n  }\n}\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","window","customElements","polyfillWrapFlushCallback","removeNodes","container","startNode","endNode","node","n","nextSibling","removeChild","noChange","nothing","marker","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","constructor","result","element","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","document","createTreeWalker","lastPartIndex","nextNode","currentNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","split","push","type","removeAttribute","tagName","data","parent","parentNode","lastIndex","insertBefore","createMarker","createTextNode","previousSibling","isTemplatePartActive","part","createComment","TemplateInstance","processor","options","_parts","update","values","setValue","commit","_clone","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","getHTML","endIndex","html","s","match","substr","getTemplateElement","createElement","innerHTML","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","_getValue","l","text","v","Array","isArray","Symbol","iterator","t","setAttribute","comitter","committer","directive","NodePart","_pendingValue","appendInto","appendChild","ref","appendIntoPart","_insert","insertAfterPart","_commitText","_commitTemplateResult","Node","_commitNode","_commitIterable","clear","templateFactory","instance","itemParts","itemPart","item","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","_boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","_options","getOptions","event","call","DefaultTemplateProcessor","prefix","defaultTemplateProcessor","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","render","firstChild","Object","assign","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","insertNodeIntoTemplate","refNode","insertCount","walkerIndex","walkerNode","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","removeStylesFromLitTemplates","templates","styles","Set","from","querySelectorAll","add","shadyRenderSet","prepareTemplateStyles","renderedDOM","condensedStyle","style","textContent","nativeShadow","querySelector","removes","hasRendered","needsScoping","ShadowRoot","firstScopeRender","renderContainer","createDocumentFragment","litRender","delete","styleElement","host","JSCompiler_renameProperty","prop","defaultConverter","toAttribute","Boolean","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","_ensureClassProperties","hasOwnProperty","superProperties","getPrototypeOf","k","createProperty","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","_valueHasChanged","_propertyValueFromAttribute","_propertyValueToAttribute","_saveInstanceProperties","_v","_applyInstanceProperties","connectedCallback","disconnectedCallback","attributeChangedCallback","_attributeToProperty","_propertyToAttribute","ctor","attrValue","propName","shouldRequestUpdate","_hasRequestedUpdate","_enqueueUpdate","requestUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","legacyCustomElement","clazz","define","standardCustomElement","descriptor","kind","elements","finisher","customElement","classOrDescriptor","standardProperty","placement","initializer","legacyProperty","proto","property","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","toString","textFromCSSResult","css","reduce","acc","idx","arrayFlat","flattenStyles","flat","LitElement","_styles","_getUniqueStyles","userStyles","flatStyles","styleSet","reduceRight","unshift","renderRoot","createRenderRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","templateResult","BYUFooter","foo","BYUHeader"],"mappings":"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"}